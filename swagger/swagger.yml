openapi: 3.0.0
info:
  title: Library System API
  version: 0.0.1
servers:
  - url: 'http://localhost:3000/'
    description: local
paths:
  /user/sessions:
    post:
      summary: signin endpoint for user
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ['success']
                  response:
                    type: object
                    properties:
                      token:
                        type: string
                      refreshToken:
                        type: string
    delete:
      summary: signout endpoint for user
      tags:
        - users
      parameters:
        - in: query
          name: refreshToken
          schema:
            type: string
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ['success']
                  response:
                    type: string
                    enum: ['User has signed out']
  /user/tokens:
    post:
      summary: endpoint for refreshing token
      tags:
        - tokens
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ['success']
                  response:
                    type: object
                    properties:
                      token:
                        type: string
                      refreshToken:
                        type: string
  /user:
    get:
      summary: "Endpoint for getting user info"
      tags:
        - users
      security:
        - KeyAuth: []
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ['success']
                  response:
                    $ref: '#/components/schemas/User'
  /books/home:
    get:
      summary: "Home page endpoint for book"
      tags:
        - books
      security:
        - KeyAuth: []
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ['success']
                  response:
                    type: object
                    properties:
                      latest_books:
                        type: array
                        items:
                          $ref: '#/components/schemas/Book'
                      most_favorite_books:
                        type: array
                        items:
                          $ref: '#/components/schemas/Book'
                      metadata:
                        type: object
                        properties:
                          latestBooksNextPage:
                            type: string
                          mostFavoriteBooksNextPage:
                            type: string
  /books/favorite:
    get:
      summary: "Favorite books endpoint for user"
      tags:
        - books
      security:
        - KeyAuth: [ ]
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
                  metadata:
                    type: object
                    properties:
                      nextPage:
                        type: string
  /books/favorites:
    post:
      summary: "Adds book to favorites"
      tags:
        - books
      security:
        - KeyAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                book_id:
                  type: string
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: string
                    enum: ['Book has been added to favorites']

  /borrows:
    get:
      summary: "Get borrows of user"
      tags:
        - borrows
      security:
        - KeyAuth: [ ]
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [ 'taken', 'returned' ]
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/borrow'
                        - type: object
                          properties:
                            book:
                              $ref: '#/components/schemas/Book'
                  metadata:
                    type: object
                    properties:
                      nextPage:
                        type: string
    post:
      summary: "Create borrow, when admin hands the book to a user (admin)"
      tags:
        - borrows
      security:
        - KeyAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_email:
                  type: string
                book_id:
                  type: string
                due_date:
                  type: string
                  format: date
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: array
                    items:
                      $ref: '#/components/schemas/borrow'
                  metadata:
                    type: object
                    properties:
                      nextPage:
                        type: string
    put:
      summary: "Update borrow status by book instance id (admin)"
      tags:
        - borrows
      security:
        - KeyAuth: [ ]
      parameters:
        - in: query
          name : book_instance_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type : string
                  enum: ['returned']
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: array
                    items:
                      $ref: '#/components/schemas/borrow'
                  metadata:
                    type: object
                    properties:
                      nextPage:
                        type: string

  /books/{id}:
    get:
      summary: "Get book by id"
      tags:
        - books
      security:
        - KeyAuth: [ ]
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    $ref: '#/components/schemas/Book'
    delete:
      summary: "Delete book by id (admin)"
      tags:
        - books
      security:
        - KeyAuth: [ ]
      parameters:
        - in: path
          required : true
          name: id
          schema:
            type: string
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: string
                    enum: [ 'Book deleted' ]
    put:
      summary: "Update book by id (admin)"
      tags:
        - books
      security:
        - KeyAuth: [ ]
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookPayload'
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: string
                    enum: [ 'Book updated' ]
  /books:
    get:
      summary: "Browse books endpoint"
      tags:
        - books
      security:
        - KeyAuth: [ ]
      parameters:
        - in: query
          name: keywords
          schema:
            type: array
            items:
              type: string
        - in: query
          name: param
          schema:
            type: string
        - in: query
          name: sort
          schema:
            type: string
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
    post:
      summary: "Create book (admin)"
      tags:
        - books
      security:
        - KeyAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookPayload'
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
  /books/{id}/instances:
    post:
      summary: "Add book instance (admin)"
      tags:
        - book-instance
      security:
        - KeyAuth: [ ]
      parameters:
        - name: id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coverType:
                  type: string
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: object
                    properties:
                      id:
                        type: string
                      coverType:
                        type: string
  /books/{id}/instances/{instanceId}:
    delete:
      summary: "Delete book instance (admin)"
      tags:
        - book-instance
      security:
        - KeyAuth: [ ]
      parameters:
        - name: id
          in: path
          schema:
            type: string
        - name: instanceId
          in: path
          schema:
            type: string
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: string
                    enum: ['Book successfully deleted']
  /files:
    post:
      summary: "Upload file (admin)"
      tags:
        - files
      security:
        - KeyAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: object
                    properties:
                      file_id:
                        type: string
  /files/{id}:
    get:
      summary: "Download file"
      tags:
        - files
      security:
        - KeyAuth: [ ]
      parameters:
        - in: path
          schema:
            type: string
          name: id
          required: true
      responses:
        200:
          description: success response
          content:
            image/jpg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
  /authors:
    get:
      summary: "Browse authors (admin)"
      tags:
        - authors
      security:
        - KeyAuth: [ ]
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        authorId:
                          type: string
                        name:
                          type: string
                  metadata:
                    type: object
                    properties:
                      nextPage:
                        type: string
    post:
      summary: "Add author (admin)"
      tags:
        - authors
      security:
        - KeyAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: object
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
  /authors/{id}/books:
    get:
      summary: "Browse books by author id"
      tags:
        - authors
      security:
        - KeyAuth: [ ]
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: array
                    items:
                      $ref : '#/components/schemas/Book'
                  metadata:
                    type: object
                    properties:
                      nextPage:
                        type: string
  /genres:
    get:
      summary: "Browse genres (admin)"
      tags:
        - genres
      security:
        - KeyAuth: [ ]
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        genre:
                          type: string
                  metadata:
                    type: object
                    properties:
                      nextPage:
                        type: string
    post:
      summary: "Add genre (admin)"
      tags:
        - genres
      security:
        - KeyAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                genre:
                  type: string
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: object
                    items:
                      type: object
                      properties:
                        genre:
                          type: string
  /coverTypes:
    get:
      summary: "Browse coverTypes (admin)"
      tags:
        - coverTypes
      security:
        - KeyAuth: [ ]
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        coverType:
                          type: string
                  metadata:
                    type: object
                    properties:
                      nextPage:
                        type: string
    post:
      summary: "Add coverType (admin)"
      tags:
        - coverTypes
      security:
        - KeyAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coverType:
                  type: string
      responses:
        200:
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'success' ]
                  response:
                    type: object
                    items:
                      type: object
                      properties:
                        coverType:
                          type: string



components:
  securitySchemes:
    KeyAuth:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    borrow:
      type: object
      properties:
        id:
          type : string
        status:
          type: string
          enum: [ 'taken', 'returned' ]
        book_instance_id:
          type: string
        due_date:
          type: string
          format: Date
        return_date:
          type : string
          format: Date
        create_date:
          type: string
          format: Date
    Book:
      type: object
      properties:
        id:
          type: string
        instances:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              coverType:
                type: string
        description:
          type: string
        author:
          type: string
        title:
          type: string
        coverImageId:
          type: string
        publishDate:
          type: string
          format: Date
        fileId:
          type: string
    BookPayload:
      type: object
      properties:
        description:
          type: string
        authorId:
          type: string
        title:
          type: string
        coverImageId:
          type: string
        publishDate:
          type: string
          format: Date
        fileId:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        profileImageUrl:
          type: string
